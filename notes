Reccomendation: 
Domain-Specific Thresholds to handle outliers:

Consider setting business rules or thresholds based on domain knowledge (e.g., minimum wage, expected salary ranges) rather than relying solely on statistical outliers.
combining statistical methods with business logic and potentially manual review is advisable for accurate data quality handling.

# DBT INCREMENTAL LOADING 
The use of incremental models in dbt is specifically designed to address the need to avoid reloading or duplicating data that is already present in the data warehouse. Hereâ€™s how this approach ensures that data already in the data warehouse is not duplicated:
Key Concepts of Incremental Models

    Avoid Redundant Loads:
        Incremental Load: Instead of reloading the entire dataset every time the dbt run occurs, the incremental model only processes new or changed records since the last successful run.
        Incremental Strategy: This is achieved using strategies such as merge, insert_overwrite, or append. The example you provided uses the merge strategy.

    Unique Key:
        Identification: The unique_key parameter (e.g., EmployeeID in your example) is used to identify records uniquely. This ensures that only records with unique keys are inserted or updated.
        Conflict Resolution: During incremental updates, if a record with the same unique key already exists in the target table, it is updated with the latest data.

    Incremental Logic:

        Filtering Existing Records: The is_incremental() conditional block helps to filter out records that already exist in the target table. For example:

        sql

{% if is_incremental() %}
    where EmployeeID not in (select EmployeeID from {{ this }})
{% endif %}

Avoid Duplication: This logic ensures that only new records are added, and existing records are not reprocessed, thereby preventing duplication.